// All references for commands in terminals

// GIt and Github

1. Remote Repository
2. Local Repository
3. Staging area
4. Working directory

git init    --> open cmd on your folder and give this command to create an git empty reository for your folder
git status  --- > command to check the status of your git folder
git add ( filename)  ---> this will send your file to the staging area from working directory
git commit -m "your comments here"   ---> this will send all files to the local Repository
git branch  ---> to check the branches in your Repository
git remote add origin https://github.com/......  ---> to send to the Repository
git push -u origin yourbranchname --->  
git checkout -b "branchname"    ---> used to swith b/w branches or to create new branch


// Java

--> If we want to generate byte code in vscode in terminal give javac (filename) it will generate byte code and then run byte code by java (filename)
-----------------------------------------------------------------------------------------------------------------------------------------------
//Main Method explanation

// main() Method___________-
Before explaining the java main() method, let’s first create a simple program to print Hello World. After that, we will explain why the main() method in java is 

public static void main(String args[]).
public class HelloWorld {
    public static void main(String args[]) {
        System.out.println("Hello World");
    }
}
 

public: the public is an access modifier that can be used to specify who can access this main() method. It simply defines the visibility 
        of the method. The JVM calls the main() method outside the class. Therefore it is necessary to make the java main() method as public.
 
static: static is a keyword in java. We can make static variables and static methods in java with the help of the static keyword. 
        The main advantage of a static method is that we can call this method without creating an instance of the class. JVM calls 
        the main() method without creating an instance of the class, therefore it is necessary to make the java main() method static.
 
void: void is a return type of method. The java main() method doesn’t return any value. Therefore, it is necessary to have a void 
       return type.
 
main: main is the name of the method. It is a method where program execution starts.
 
String args[]: String in java is a class that is used to work on Strings and args is a reference variable that refers to an array of 
               type String. If you want to pass the argument through the command line then it is necessary to make the argument of 
               the main() method as String args[].
 --------------------------------------------------------------------------------------------------------------------------------------------

 // Java variables

 Introduction and Declaration of Variables

 

Introduction to Variables

 

A Variable is a name given to a memory location. It is used to store a value that may vary. Java is a statically typed language, and hence, all the variables are 
declared before use.  

 

Variable Declaration

 

In Java, we can declare variables as follows:

type: Type of the data that can be stored in this variable. It can be int, float, double, etc.
name: Name given to the variable.
data_type variable_name;

Example: int x;

 

In this way, we can only create a variable in the memory location. Currently, it doesn’t have any value. We can assign the value in this variable by using two ways:

By using variable initialization.
By taking input
Here, we have discussed only the first way, i.e. variable initialization. We will discuss the second way later.

 

data_type variable_name = value;

Example: int x = 10;

A variable name should be short and meaningful.
It should begin with a lowercase letter.
It can begin with special characters such as _ (underscore) and $ (dollar) sign.
If the variable name contains multiple words, then use the camel case, i.e. variable name should start with a lowercase letter followed by
     an uppercase letter. For eg: codingNinja, camelCase.
Always try to avoid single character variable names such as i, j, and k except for the temporary variables.
A variable name can not contain whitespaces.
We can’t use keywords(pre-defined literals) as the variable names.

--------------------------------------------------------------------------------------------------------------------------------------------

// Java keywords

Keywords in Java are also known as reserved words. These are the predefined words therefore they can’t be used as a variable name. 
If we will use keywords as a variable name, the result will be a compile-time error. The list of all the Java Keywords is given below.

abstract	A non-access modifier. Used for classes and methods: An abstract class cannot be used to create objects (to access it, it must be inherited from another class). An abstract method can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from)
assert	For debugging
boolean	A data type that can only store true or false values
break	Breaks out of a loop or a switch block
byte	A data type that can store whole numbers from -128 and 127
case	Marks a block of code in switch statements
catch	Catches exceptions generated by try statements
char	A data type that is used to store a single character
class	Defines a class
continue	Continues to the next iteration of a loop
const	Defines a constant. Not in use - use final instead
default	Specifies the default block of code in a switch statement
do	Used together with while to create a do-while loop
double	A data type that can store fractional numbers from 1.7e−308 to 1.7e+308
else	Used in conditional statements
enum	Declares an enumerated (unchangeable) type
exports	Exports a package with a module. New in Java 9
extends	Extends a class (indicates that a class is inherited from another class)
final	A non-access modifier used for classes, attributes and methods, which makes them non-changeable (impossible to inherit or override)
finally	Used with exceptions, a block of code that will be executed no matter if there is an exception or not
float	A data type that can store fractional numbers from 3.4e−038 to 3.4e+038
for	Create a for loop
goto	Not in use, and has no function
if	Makes a conditional statement
implements	Implements an interface
import	Used to import a package, class or interface
instanceof	Checks whether an object is an instance of a specific class or an interface
int	A data type that can store whole numbers from -2147483648 to 2147483647
interface	Used to declare a special type of class that only contains abstract methods
long	A data type that can store whole numbers from -9223372036854775808 to 9223372036854775808
module	Declares a module. New in Java 9
native	Specifies that a method is not implemented in the same Java source file (but in another language)
new	Creates new objects
package	Declares a package
private	An access modifier used for attributes, methods and constructors, making them only accessible within the declared class
protected	An access modifier used for attributes, methods and constructors, making them accessible in the same package and subclasses
public	An access modifier used for classes, attributes, methods and constructors, making them accessible by any other class
requires	Specifies required libraries inside a module. New in Java 9
return	Finished the execution of a method, and can be used to return a value from a method
short	A data type that can store whole numbers from -32768 to 32767
static	A non-access modifier used for methods and attributes. Static methods/attributes can be accessed without creating an object of a class
strictfp	Obsolete. Restrict the precision and rounding of floating point calculations
super	Refers to superclass (parent) objects
switch	Selects one of many code blocks to be executed
synchronized	A non-access modifier, which specifies that methods can only be accessed by one thread at a time
this	Refers to the current object in a method or constructor
throw	Creates a custom error
throws	Indicates what exceptions may be thrown by a method
transient	Used to ignore an attribute when serializing an object
try	Creates a try...catch statement
var	Declares a variable. New in Java 10
void	Specifies that a method should not have a return value
volatile	Indicates that an attribute is not cached thread-locally, and is always read from the "main memory"
while	Creates a while loop

Note: true, false, and null are not keywords, but they are literals and reserved words that cannot be used as identifiers.

--------------------------------------------------------------------------------------------------------------------------------------

// Java Datatypes

Data types in Java
 

The data type defines the type of value that can be stored in a variable. For example, if a variable has an int data type, it can only store an integer value. In java, there are two categories of data types.

 

Primitive Data Type: A primitive data type is predefined by the language and is named by a keyword or reserved keyword. There are eight types of primitive data types in java such as boolean, char, int, short, byte, long, float, and double.
boolean: boolean data type specifies only one bit of information and it is used to store only two possible values either true or false.
byte: byte data type is 8 bit signed two’s complement integer. Its value lies between -128 to 127. It has a minimum value of -128 and a maximum value of 127 (inclusive). The byte data type is most commonly used to save memory in large arrays.
short: short data type is a 16-bit signed two’s complement integer. It can hold any number between -32768 to 32767 (inclusive). Like byte data type, it is commonly used to save memory in large arrays.
int: int data type is 32-bit signed two’s complement integer. It can hold the number between -2,147,483,648 to 2,147,483,648. The default value of the int data type is 0.
long: long data type is 64-bit two’s complement integer. It can hold the number between -2^63 to 2^63-1. The default value of long data type is 0.
float: float data type is used to store floating-point numbers. The float data type is a single-precision 32-bit IEEE 754 floating-point. It can hold 6 to 7 decimal digits. It is recommended to use float instead of double if you need to save memory in large arrays of floating-point numbers. The default value of float is 0.0f.
double: double data type is generally used to store decimal values. The double data type is a double-precision 64-bit IEEE 754 floating-point. For decimal values, this data type is generally the default choice. The default value of double is 0.0d.
char: The char data type is used to store characters. The char data type is a single 16-bit Unicode character. 
 

2. Non-Primitive Data Type: Non-Primitive data type refers to the objects. ArrayList and String are some of the examples of Non-Primitive data type. We will discuss the Non-Primitive data type later. 

 

Example

 

// Primitive Data Types

int price = 5000;                               // Integer Value

float rateOfInterest = 5.99f;                   // Floating point number

char ch = 'a';                                  // Character

 

 

// Non-Primitive Data Types

String str = "Coding Ninjas";                   // String

 ---------------------------------------------------------------------------------------------------------------------------------------------

